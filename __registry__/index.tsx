/* eslint-disable @typescript-eslint/ban-ts-comment */
/** biome-ignore-all lint/suspicious/noUselessEscapeInString: explanation */
/** biome-ignore-all lint/suspicious/noTemplateCurlyInString: explanation */
/** biome-ignore-all lint/correctness/noUnusedImports: explanation */
/** biome-ignore-all lint/suspicious/noExplicitAny: explanation */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import * as React from "react";

export const Index: Record<string, any> ={
  "image-input": {
    name: "image-input",
    description: "Image Input component with preview and clear functionality.",
    type: "registry:component",
    files: [{
      path: "registry//default/starter-kit-ui/image-input.tsx",
      content: "/** biome-ignore-all lint/complexity/useOptionalChain: explanation */\r\n\"use client\";\r\n\r\nimport { Image as ImageIcon, LoaderCircle, Upload, X } from \"lucide-react\";\r\nimport Image from \"next/image\";\r\nimport { useRef, useState } from \"react\";\r\nimport { toast } from \"sonner\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\n\r\ninterface ImageInputProps {\r\n  value?: string;\r\n  onChange: (value: string) => void;\r\n  onBlur?: () => void;\r\n  name?: string;\r\n  oldImageUrl?: string; // For cleanup when updating\r\n}\r\n\r\nexport function ImageInput({\r\n  value = \"\",\r\n  onChange,\r\n  onBlur,\r\n  name,\r\n  oldImageUrl,\r\n}: ImageInputProps) {\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [previewError, setPreviewError] = useState(false);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    // Validate file type\r\n    if (!file.type.startsWith(\"image/\")) {\r\n      toast.error(\"Please upload an image file\");\r\n      return;\r\n    }\r\n\r\n    // Validate file size (max 10MB)\r\n    if (file.size > 10 * 1024 * 1024) {\r\n      toast.error(\"Image size should be less than 10MB\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsUploading(true);\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n\r\n      // Include old image URL for cleanup if provided\r\n      if (oldImageUrl) {\r\n        formData.append(\"oldImageUrl\", oldImageUrl);\r\n      }\r\n\r\n      const response = await fetch(\"/api/upload\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || \"Upload failed\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      onChange(data.url);\r\n      setPreviewError(false);\r\n      toast.success(\"Image uploaded successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error uploading file:\", error);\r\n      toast.error(\r\n        error instanceof Error ? error.message : \"Failed to upload image\",\r\n      );\r\n    } finally {\r\n      setIsUploading(false);\r\n      // Reset file input\r\n      if (fileInputRef.current) {\r\n        fileInputRef.current.value = \"\";\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleImageError = () => {\r\n    setPreviewError(true);\r\n    toast.error(\"Failed to load image preview\");\r\n  };\r\n\r\n  const handleClearImage = async () => {\r\n    // If there's a current image URL and it's from Cloudinary, delete it\r\n    if (value && value.includes(\"cloudinary.com\")) {\r\n      try {\r\n        const response = await fetch(\"/api/upload\", {\r\n          method: \"DELETE\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ imageUrl: value }),\r\n        });\r\n\r\n        if (response.ok) {\r\n          toast.success(\"Previous image removed from storage\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error deleting image:\", error);\r\n        // Don't show error to user as this is cleanup\r\n      }\r\n    }\r\n\r\n    onChange(\"\");\r\n    setPreviewError(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex gap-2 items-center\">\r\n      <Input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={(e) => {\r\n          onChange(e.target.value);\r\n          setPreviewError(false);\r\n        }}\r\n        onBlur={onBlur}\r\n        name={name}\r\n        placeholder=\"Enter image URL or upload a file\"\r\n        className=\"flex-1\"\r\n      />\r\n      <input\r\n        type=\"file\"\r\n        ref={fileInputRef}\r\n        onChange={handleFileChange}\r\n        accept=\"image/*\"\r\n        className=\"hidden\"\r\n      />\r\n      <Button\r\n        type=\"button\"\r\n        variant=\"outline\"\r\n        size=\"icon\"\r\n        onClick={() => fileInputRef.current?.click()}\r\n        disabled={isUploading}\r\n        title=\"Upload image\"\r\n      >\r\n        {isUploading ? (\r\n          <LoaderCircle className=\"h-4 w-4 animate-spin\" />\r\n        ) : (\r\n          <Upload className=\"h-4 w-4\" />\r\n        )}\r\n      </Button>\r\n\r\n      {value && (\r\n        <>\r\n          <Button\r\n            type=\"button\"\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            onClick={handleClearImage}\r\n            title=\"Clear image\"\r\n          >\r\n            <X className=\"h-4 w-4\" />\r\n          </Button>\r\n          <div className=\"relative h-10 w-10\">\r\n            {!previewError ? (\r\n              <Image\r\n                src={value}\r\n                alt=\"Preview\"\r\n                fill\r\n                className=\"h-10 w-10 object-cover rounded-md\"\r\n                onError={handleImageError}\r\n              />\r\n            ) : (\r\n              <div className=\"h-10 w-10 rounded-md bg-gray-100 flex items-center justify-center\">\r\n                <ImageIcon className=\"h-6 w-6 text-gray-400\" />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      type: "registry:component",
    }],
    component: "@/registry/default/starter-kit-ui/image-input",
  },
  "maps-embedder": {
    name: "maps-embedder",
    description: "Embed Google Maps using an iframe on React.",
    type: "registry:component",
    files: [{
      path: "registry//default/starter-kit-ui/maps-embedder.tsx",
      content: "import { cn } from \"@/lib/utils\"\r\n\r\nconst MapsEmbedder = ({className, mapUrl=\"https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d349.01779998166694!2d83.36284914690383!3d26.7562308741741!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sin!4v1760037405755!5m2!1sen!2sin\"}:{className?: string, mapUrl: string}) => {\r\n    return (\r\n        <div className={cn(\"min-h-0 h-[600px] w-full\",className)}>\r\n            <iframe\r\n                src={mapUrl}\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                style={{ border: 0 }}\r\n                allowFullScreen\r\n                loading=\"lazy\"\r\n                title='Embedded Map'\r\n                referrerPolicy=\"no-referrer-when-downgrade\"\r\n            ></iframe>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapsEmbedder\r\n",
      type: "registry:component",
    }],
    component: "@/registry/default/starter-kit-ui/maps-embedder",
  },
  "image-upload-single": {
    name: "image-upload-single",
    description: "Single Image Upload component with preview and clear functionality.",
    type: "registry:component",
    files: [{
      path: "registry//default/starter-kit-ui/image-upload-single.tsx",
      content: "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { ImageInput } from \"./image-input\";\r\n\r\nconst ImageUploadSingle = () => {\r\n  const [imageUrl, setImageUrl] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-3\">\r\n      <ImageInput\r\n        value={imageUrl}\r\n        onChange={(url) => {\r\n          setImageUrl(url); // ðŸ‘ˆ jaise hi file upload hoga, Cloudinary URL aa jayega\r\n        }}\r\n      />\r\n\r\n      {imageUrl && (\r\n        <p className=\"text-sm text-gray-600\">\r\n          âœ… Uploaded Image:{\" \"}\r\n          <a\r\n            href={imageUrl}\r\n            target=\"_blank\"\r\n            className=\"text-violet-600 underline\"\r\n          >\r\n            {imageUrl}\r\n          </a>\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUploadSingle;\r\n",
      type: "registry:component",
    }],
    component: "@/registry/default/starter-kit-ui/image-upload-single",
  },
  "image-upload-multiple": {
    name: "image-upload-multiple",
    description: "Multiple Image Upload component with preview and clear functionality & Queues.",
    type: "registry:component",
    files: [{
      path: "registry//default/starter-kit-ui/image-upload-multiple.tsx",
      content: "/** biome-ignore-all lint/a11y/noLabelWithoutControl: explanation */\r\n/** biome-ignore-all lint/correctness/noUnusedVariables: explanation */\r\n/** biome-ignore-all lint/complexity/useOptionalChain: explanation */\r\n/** biome-ignore-all lint/a11y/noStaticElementInteractions: explanation */\r\n\"use client\";\r\n\r\nimport { Check, Image as ImageIcon, Loader2, Upload, Video, X } from \"lucide-react\";\r\nimport Image from \"next/image\";\r\nimport { useCallback, useRef, useState } from \"react\";\r\nimport { toast } from \"sonner\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\n\r\n/**\r\n * Types\r\n */\r\nexport interface UploadedAsset {\r\n  public_id?: string;\r\n  secure_url?: string;\r\n  width?: number;\r\n  height?: number;\r\n  format?: string;\r\n  bytes?: number;\r\n}\r\n\r\nexport interface ImageUploadMultipleProps {\r\n  endpoint?: string;\r\n  /** image max size MB */\r\n  maxImageSizeMB?: number;\r\n  /** video max size MB */\r\n  maxVideoSizeMB?: number;\r\n  accept?: string;\r\n  onComplete?: (uploaded: UploadedAsset[]) => void;\r\n  label?: string;\r\n  multiple?: boolean;\r\n}\r\n\r\ninterface FileItem {\r\n  id: string;\r\n  file: File;\r\n  progress: number;\r\n  status: \"queued\" | \"uploading\" | \"done\" | \"error\" | \"canceled\";\r\n  error?: string;\r\n  uploaded?: UploadedAsset;\r\n}\r\n\r\nexport default function ImageUploadMultiple({\r\n  endpoint = \"/api/upload\",\r\n  maxImageSizeMB = 10,\r\n  maxVideoSizeMB = 100,\r\n  accept = \"image/*,video/*\",\r\n  onComplete,\r\n  label = \"Upload Files\",\r\n  multiple = true,\r\n}: ImageUploadMultipleProps) {\r\n  const inputRef = useRef<HTMLInputElement | null>(null);\r\n  const [items, setItems] = useState<FileItem[]>([]);\r\n  const [isDragging, setDragging] = useState(false);\r\n  const [busy, setBusy] = useState(false);\r\n\r\n  const removeItem = (id: string) => {\r\n    setItems((prev) => prev.filter((i) => i.id !== id));\r\n  };\r\n\r\n  const addFiles = useCallback(\r\n    (files: FileList | File[]) => {\r\n      const arr = Array.from(files);\r\n      if (!arr.length) return;\r\n\r\n      const oversize = arr.find((f) => {\r\n        if (f.type.startsWith(\"video/\")) {\r\n          return f.size > maxVideoSizeMB * 1024 * 1024;\r\n        }\r\n        return f.size > maxImageSizeMB * 1024 * 1024;\r\n      });\r\n\r\n      if (oversize) {\r\n        const limit = oversize.type.startsWith(\"video/\") ? maxVideoSizeMB : maxImageSizeMB;\r\n        toast.error(\r\n          \`\"\${oversize.name}\" is larger than \${limit}MB (\${oversize.type.startsWith(\"video/\") ? \"video\" : \"image\"})\`\r\n        );\r\n        return;\r\n      }\r\n\r\n      const next: FileItem[] = arr.map((file) => ({\r\n        id: \`\${file.name}-\${file.size}-\${file.lastModified}-\${Math.random().toString(36).slice(2)}\`,\r\n        file,\r\n        progress: 0,\r\n        status: \"queued\",\r\n      }));\r\n      setItems((prev) => [...prev, ...next]);\r\n    },\r\n    [maxImageSizeMB, maxVideoSizeMB]\r\n  );\r\n\r\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    setDragging(false);\r\n    if (e.dataTransfer.files && e.dataTransfer.files.length) {\r\n      addFiles(e.dataTransfer.files);\r\n    }\r\n  };\r\n\r\n  const startUpload = async () => {\r\n    if (!items.length) {\r\n      toast.message(\"Select files first\");\r\n      return;\r\n    }\r\n\r\n    setBusy(true);\r\n    const uploaded: UploadedAsset[] = [];\r\n\r\n    // helper type-safe patch updater\r\n    type Patch = Partial<FileItem>;\r\n    const makeUpdater = (id: string) => (patch: Patch) =>\r\n      setItems((prev) => prev.map((p) => (p.id === id ? { ...p, ...(patch as Patch) } : p)));\r\n\r\n    for (const it of items) {\r\n      if (it.status === \"done\") continue;\r\n\r\n      await new Promise<void>((resolve) => {\r\n        const xhr = new XMLHttpRequest();\r\n        const form = new FormData();\r\n        form.append(\"files\", it.file);\r\n\r\n        const toastId = toast.loading(\`Uploading \${it.file.name} â€” 0%\`);\r\n        const update = makeUpdater(it.id);\r\n\r\n        update({ status: \"uploading\", progress: 0 });\r\n\r\n        xhr.upload.onprogress = (e) => {\r\n          if (e.lengthComputable) {\r\n            const percent = Math.min(99, Math.round((e.loaded / e.total) * 100));\r\n            update({ progress: percent });\r\n            toast.message(\`Uploading \${it.file.name} â€” \${percent}%\`, { id: toastId });\r\n          }\r\n        };\r\n\r\n        xhr.onreadystatechange = () => {\r\n          if (xhr.readyState === XMLHttpRequest.DONE) {\r\n            try {\r\n              if (xhr.status >= 200 && xhr.status < 300) {\r\n                // parse response safely and map to UploadedAsset if possible\r\n                let asset: UploadedAsset | undefined;\r\n                try {\r\n                  const json = JSON.parse(xhr.responseText);\r\n                  if (Array.isArray(json) && json.length > 0) {\r\n                    asset = json[0] as UploadedAsset;\r\n                  } else if (json?.result) {\r\n                    asset = json.result as UploadedAsset;\r\n                  } else if (json?.secure_url || json?.public_id) {\r\n                    asset = json as UploadedAsset;\r\n                  }\r\n                } catch (err) {\r\n                  // keep asset undefined if parse fails\r\n                  asset = undefined;\r\n                }\r\n\r\n                if (asset) {\r\n                  uploaded.push(asset);\r\n                  update({ status: \"done\", progress: 100, uploaded: asset });\r\n                } else {\r\n                  // no asset metadata returned, still mark done\r\n                  update({ status: \"done\", progress: 100 });\r\n                }\r\n\r\n                toast.success(\`Uploaded \${it.file.name}\`, { id: toastId });\r\n                resolve();\r\n              } else {\r\n                const msg = xhr.responseText || \"Upload failed\";\r\n                update({ status: \"error\", error: msg });\r\n                toast.error(\`Failed: \${it.file.name}\`, { id: toastId });\r\n                resolve();\r\n              }\r\n            } catch (err) {\r\n              // fallback error handling\r\n              update({ status: \"error\", error: \"Unknown error\" });\r\n              toast.error(\`Failed: \${it.file.name}\`, { id: toastId });\r\n              resolve();\r\n            }\r\n          }\r\n        };\r\n\r\n        xhr.onerror = () => {\r\n          update({ status: \"error\", error: \"Network error\" });\r\n          toast.error(\`Network error: \${it.file.name}\`);\r\n          resolve();\r\n        };\r\n\r\n        xhr.open(\"POST\", endpoint, true);\r\n        xhr.send(form);\r\n      });\r\n    }\r\n\r\n    setBusy(false);\r\n\r\n    if (onComplete) {\r\n      try {\r\n        onComplete(uploaded);\r\n      } catch (err) {\r\n        console.error(\"onComplete handler error:\", err);\r\n      }\r\n    }\r\n\r\n    // clear queue of successfully uploaded items (keep errors if any)\r\n    setItems((prev) => prev.filter((p) => p.status !== \"done\"));\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 border rounded-lg bg-muted/30\">\r\n      {label && <label className=\"block mb-2 font-medium\">{label}</label>}\r\n\r\n      {/* Dropzone */}\r\n      <div\r\n        onDragOver={(e) => {\r\n          e.preventDefault();\r\n          setDragging(true);\r\n        }}\r\n        onDragLeave={() => setDragging(false)}\r\n        onDrop={handleDrop}\r\n        className={[\r\n          \"relative flex flex-col items-center justify-center gap-3\",\r\n          \"rounded-xl border-2 border-dashed p-8 text-center\",\r\n          isDragging ? \"border-primary bg-primary/5\" : \"border-muted-foreground/30\",\r\n        ].join(\" \")}\r\n      >\r\n        <Upload className=\"h-6 w-6\" />\r\n        <div className=\"text-sm\">\r\n          <span className=\"font-medium\">Drag & drop</span> files here or\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button\r\n            type=\"button\"\r\n            onClick={() => inputRef.current?.click()}\r\n            className=\"gap-2\"\r\n            disabled={busy}\r\n          >\r\n            <Upload className=\"h-4 w-4\" /> Choose Files\r\n          </Button>\r\n          <span className=\"text-xs text-muted-foreground\">\r\n            (Images up to {maxImageSizeMB}MB, Videos up to {maxVideoSizeMB}MB)\r\n          </span>\r\n        </div>\r\n        <Input\r\n          ref={inputRef}\r\n          type=\"file\"\r\n          className=\"hidden\"\r\n          accept={accept}\r\n          multiple={multiple}\r\n          onChange={(e) => {\r\n            if (e.target.files) addFiles(e.target.files);\r\n            e.currentTarget.value = \"\";\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      {/* Queue */}\r\n      {items.length > 0 && (\r\n        <div className=\"mt-4 space-y-2\">\r\n          {items.map((it) => (\r\n            <div key={it.id} className=\"flex items-center gap-3 border rounded-lg p-3\">\r\n              <div className=\"shrink-0 w-10 h-10 bg-muted rounded overflow-hidden flex items-center justify-center relative\">\r\n                {it.file.type.startsWith(\"image/\") ? (\r\n                  <Image src={URL.createObjectURL(it.file)} alt={it.file.name} className=\"object-cover w-full h-full\" fill />\r\n                ) : it.file.type.startsWith(\"video/\") ? (\r\n                  <Video className=\"h-5 w-5\" />\r\n                ) : (\r\n                  <ImageIcon className=\"h-5 w-5\" />\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"min-w-0 flex-1\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"truncate text-sm font-medium\">{it.file.name}</div>\r\n                  <div className=\"text-xs text-muted-foreground\">{(it.file.size / 1024 / 1024).toFixed(2)} MB</div>\r\n                </div>\r\n\r\n                <div className=\"h-2 w-full bg-muted rounded overflow-hidden mt-2\">\r\n                  <div className=\"h-full bg-primary transition-all\" style={{ width: \`\${it.progress}%\` }} />\r\n                </div>\r\n\r\n                <div className=\"mt-1 text-xs\">\r\n                  {it.status === \"uploading\" && (\r\n                    <span className=\"inline-flex items-center gap-1\">\r\n                      <Loader2 className=\"h-3 w-3 animate-spin\" /> Uploadingâ€¦ {it.progress}%\r\n                    </span>\r\n                  )}\r\n                  {it.status === \"done\" && (\r\n                    <span className=\"inline-flex items-center gap-1 text-green-600\">\r\n                      <Check className=\"h-3 w-3\" /> Done\r\n                    </span>\r\n                  )}\r\n                  {it.status === \"error\" && <span className=\"text-destructive\">{it.error || \"Failed\"}</span>}\r\n                </div>\r\n              </div>\r\n\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                onClick={() => removeItem(it.id)}\r\n                disabled={busy && it.status === \"uploading\"}\r\n                className=\"shrink-0\"\r\n                title=\"Remove\"\r\n              >\r\n                <X className=\"h-4 w-4\" />\r\n              </Button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"mt-4 flex items-center gap-2\">\r\n        <Button onClick={startUpload} disabled={busy || items.length === 0} className=\"gap-2\">\r\n          {busy ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Upload className=\"h-4 w-4\" />}\r\n          {busy ? \"Uploadingâ€¦\" : \"Start Upload\"}\r\n        </Button>\r\n\r\n        {items.length > 0 && (\r\n          <Button variant=\"outline\" onClick={() => setItems([])} disabled={busy}>\r\n            Clear Queue\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      type: "registry:component",
    }],
    component: "@/registry/default/starter-kit-ui/image-upload-multiple",
  },
  "multi-select": {
    name: "multi-select",
    description: "A customizable multi-select dropdown component.",
    type: "registry:component",
    files: [{
      path: "registry//default/starter-kit-ui/multi-select.tsx",
      content: "\"use client\"\r\nimport { ChevronDown, X } from \"lucide-react\"\r\nimport type React from \"react\"\r\nimport { useEffect, useRef, useState } from \"react\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuCheckboxItem,\r\n    DropdownMenuContent,\r\n    DropdownMenuLabel,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport interface MultiSelectProps {\r\n    options?: string[]\r\n    placeholder?: string\r\n    label?: string\r\n    className?: string\r\n    optionsDropdownWidth?: number\r\n    optionsDropdownClassName?: string\r\n    variant?: \"default\" | \"outline\" | \"secondary\"\r\n    size?: \"sm\" | \"default\" | \"lg\"\r\n    value?: string[] // Controlled value\r\n    onChange?: (selectedOptions: string[]) => void // Callback when selection changes\r\n}\r\n\r\nconst MultiSelect = ({\r\n    options = [\"Apple\", \"Banana\", \"Guava\", \"Oranges\"],\r\n    placeholder = \"Select options\",\r\n    label = \"Select options\",\r\n    className,\r\n    optionsDropdownWidth,\r\n    optionsDropdownClassName,\r\n    variant = \"default\",\r\n    size = \"default\",\r\n    value,\r\n    onChange,\r\n}: MultiSelectProps) => {\r\n    const [open, setOpen] = useState<boolean>(false)\r\n    const [disableTrigger, setDisableTrigger] = useState<boolean>(false)\r\n    const [selectedOptions, setSelectedOptions] = useState<string[]>(value || [])\r\n    const triggerRef = useRef<HTMLDivElement>(null)\r\n    const [triggerWidth, setTriggerWidth] = useState<number>(0)\r\n\r\n    // Update internal state when value prop changes (controlled component)\r\n    useEffect(() => {\r\n        if (value !== undefined) {\r\n            setSelectedOptions(value)\r\n        }\r\n    }, [value])\r\n\r\n    // Update trigger width when component mounts or resizes\r\n    useEffect(() => {\r\n        const updateWidth = () => {\r\n            if (triggerRef.current) {\r\n                setTriggerWidth(triggerRef.current.offsetWidth)\r\n            }\r\n        }\r\n\r\n        updateWidth()\r\n        window.addEventListener('resize', updateWidth)\r\n        \r\n        return () => {\r\n            window.removeEventListener('resize', updateWidth)\r\n        }\r\n    }, [])\r\n\r\n    const handleOptionToggle = (option: string) => {\r\n        const newSelectedOptions = selectedOptions.includes(option)\r\n            ? selectedOptions.filter(item => item !== option)\r\n            : [option, ...selectedOptions]\r\n        \r\n        setSelectedOptions(newSelectedOptions)\r\n        onChange?.(newSelectedOptions) // Call onChange callback\r\n    }\r\n\r\n    const removeOption = (option: string, e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        const newSelectedOptions = selectedOptions.filter(item => item !== option)\r\n        setSelectedOptions(newSelectedOptions)\r\n        onChange?.(newSelectedOptions) // Call onChange callback\r\n    }\r\n\r\n    const displayValue = selectedOptions.length > 0\r\n        ? \`\${selectedOptions.length} selected\`\r\n        : \"\"\r\n\r\n    // Size variants\r\n    const sizeClasses = {\r\n        sm: \"h-8 text-sm py-1\",\r\n        default: \"h-10 py-2\",\r\n        lg: \"h-12 text-lg py-3\",\r\n    }\r\n\r\n    // Variant classes\r\n    const variantClasses = {\r\n        default: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary: \"border border-border bg-secondary hover:bg-secondary/80\",\r\n    }\r\n\r\n    // Badge size variants\r\n    const badgeSizeClasses = {\r\n        sm: \"text-xs px-1.5 h-5\",\r\n        default: \"text-sm px-2 h-6\",\r\n        lg: \"text-base px-2.5 h-7\",\r\n    }\r\n\r\n    return (\r\n        <DropdownMenu open={open} onOpenChange={setOpen}>\r\n            <div className={cn(\"flex flex-col gap-2 w-full\", className)}>\r\n                <p className=\"w-full flex items-center justify-between px-3.5\">\r\n                    <span>{label}</span> \r\n                    <span>{displayValue}</span>\r\n                </p>\r\n                <DropdownMenuTrigger asChild disabled={disableTrigger}>\r\n                    <div\r\n                        ref={triggerRef}\r\n                        className={cn(\r\n                            \"relative cursor-pointer rounded-md border border-input bg-background transition-colors\",\r\n                            \"focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2\",\r\n                            sizeClasses[size],\r\n                            variantClasses[variant],\r\n                            \"w-full\" // Ensure full width\r\n                        )}\r\n                    >\r\n                        <Input\r\n                            readOnly\r\n                            placeholder={placeholder}\r\n                            className={cn(\r\n                                \"h-full border-0 focus-visible:ring-0 focus-visible:ring-offset-0\",\r\n                                \"placeholder:text-muted-foreground text-foreground cursor-pointer pr-10\",\r\n                                \"bg-transparent w-full\"\r\n                            )}\r\n                        />\r\n                        <ChevronDown className={cn(\r\n                            \"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\",\r\n                            {\r\n                                \"h-3 w-3\": size === \"sm\",\r\n                                \"h-4 w-4\": size === \"default\",\r\n                                \"h-5 w-5\": size === \"lg\",\r\n                            }\r\n                        )} />\r\n\r\n                        {/* Selected options as badges */}\r\n                        {selectedOptions.length > 0 && (\r\n                            <div className={cn(\r\n                                \"absolute left-3 top-1/2 transform -translate-y-1/2 flex gap-1 overflow-hidden\",\r\n                                {\r\n                                    \"max-w-[75%]\": size === \"sm\",\r\n                                    \"max-w-[80%]\": size === \"default\",\r\n                                    \"max-w-[85%]\": size === \"lg\",\r\n                                }\r\n                            )}>\r\n                                {selectedOptions.map((option) => (\r\n                                    <Badge\r\n                                        key={option}\r\n                                        variant=\"default\"\r\n                                        className={cn(\r\n                                            \"flex items-center gap-1 pr-1 max-w-[120px] truncate\",\r\n                                            badgeSizeClasses[size]\r\n                                        )}\r\n                                    >\r\n                                        <span className=\"truncate\">{option}</span>\r\n                                        <Button\r\n                                            size=\"icon-sm\"\r\n                                            onClick={(e) => removeOption(option, e)}\r\n                                            onMouseOver={()=>setDisableTrigger(true)}\r\n                                            onMouseLeave={()=>setDisableTrigger(false)}\r\n                                            className={cn(\r\n                                                \"hover:bg-accent rounded-full transition-colors\",\r\n                                                {\r\n                                                    \"p-0.5\": size === \"sm\",\r\n                                                    \"p-1\": size === \"default\" || size === \"lg\",\r\n                                                }\r\n                                            )}\r\n                                        >\r\n                                            <X className={cn({\r\n                                                \"h-2.5 w-2.5\": size === \"sm\",\r\n                                                \"h-3 w-3\": size === \"default\",\r\n                                                \"h-3.5 w-3.5\": size === \"lg\",\r\n                                            })} />\r\n                                        </Button>\r\n                                    </Badge>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </DropdownMenuTrigger>\r\n                <DropdownMenuContent\r\n                    className={cn(\"w-full\", optionsDropdownClassName)}\r\n                    style={{ \r\n                        width: optionsDropdownWidth \r\n                            ? \`\${optionsDropdownWidth}px\` \r\n                            : \`\${triggerWidth}px\` // Use trigger width as default\r\n                    }}\r\n                    align=\"start\"\r\n                >\r\n                    <DropdownMenuLabel>{label}</DropdownMenuLabel>\r\n                    <DropdownMenuSeparator />\r\n                    <div className=\"max-h-60 overflow-auto\">\r\n                        {options.map((option) => (\r\n                            <DropdownMenuCheckboxItem\r\n                                key={option}\r\n                                checked={selectedOptions.includes(option)}\r\n                                onCheckedChange={() => handleOptionToggle(option)}\r\n                                onSelect={(e) => e.preventDefault()}\r\n                                className={cn({\r\n                                    \"text-sm\": size === \"sm\",\r\n                                    \"text-base\": size === \"lg\",\r\n                                })}\r\n                            >\r\n                                {option}\r\n                            </DropdownMenuCheckboxItem>\r\n                        ))}\r\n                    </div>\r\n                </DropdownMenuContent>\r\n            </div>\r\n        </DropdownMenu>\r\n    )\r\n}\r\n\r\nexport default MultiSelect",
      type: "registry:component",
    }],
    component: "@/registry/default/starter-kit-ui/multi-select",
  },
}