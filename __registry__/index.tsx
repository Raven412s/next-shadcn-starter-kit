/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import * as React from "react";

export const Index: Record<string, any> ={
  "image-input": {
    name: "image-input",
    description: "Image Input component with preview and clear functionality.",
    type: "registry:component",
    files: [{
      path: "registry//default/starter-kit-ui/image-input.tsx",
      content: "/** biome-ignore-all lint/complexity/useOptionalChain: explanation */\r\n\"use client\";\r\n\r\nimport { Image as ImageIcon, LoaderCircle, Upload, X } from \"lucide-react\";\r\nimport Image from \"next/image\";\r\nimport { useRef, useState } from \"react\";\r\nimport { toast } from \"sonner\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\n\r\ninterface ImageInputProps {\r\n  value?: string;\r\n  onChange: (value: string) => void;\r\n  onBlur?: () => void;\r\n  name?: string;\r\n  oldImageUrl?: string; // For cleanup when updating\r\n}\r\n\r\nexport function ImageInput({\r\n  value = \"\",\r\n  onChange,\r\n  onBlur,\r\n  name,\r\n  oldImageUrl,\r\n}: ImageInputProps) {\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [previewError, setPreviewError] = useState(false);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    // Validate file type\r\n    if (!file.type.startsWith(\"image/\")) {\r\n      toast.error(\"Please upload an image file\");\r\n      return;\r\n    }\r\n\r\n    // Validate file size (max 10MB)\r\n    if (file.size > 10 * 1024 * 1024) {\r\n      toast.error(\"Image size should be less than 10MB\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsUploading(true);\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n\r\n      // Include old image URL for cleanup if provided\r\n      if (oldImageUrl) {\r\n        formData.append(\"oldImageUrl\", oldImageUrl);\r\n      }\r\n\r\n      const response = await fetch(\"/api/upload\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || \"Upload failed\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      onChange(data.url);\r\n      setPreviewError(false);\r\n      toast.success(\"Image uploaded successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error uploading file:\", error);\r\n      toast.error(\r\n        error instanceof Error ? error.message : \"Failed to upload image\",\r\n      );\r\n    } finally {\r\n      setIsUploading(false);\r\n      // Reset file input\r\n      if (fileInputRef.current) {\r\n        fileInputRef.current.value = \"\";\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleImageError = () => {\r\n    setPreviewError(true);\r\n    toast.error(\"Failed to load image preview\");\r\n  };\r\n\r\n  const handleClearImage = async () => {\r\n    // If there's a current image URL and it's from Cloudinary, delete it\r\n    if (value && value.includes(\"cloudinary.com\")) {\r\n      try {\r\n        const response = await fetch(\"/api/upload\", {\r\n          method: \"DELETE\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ imageUrl: value }),\r\n        });\r\n\r\n        if (response.ok) {\r\n          toast.success(\"Previous image removed from storage\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error deleting image:\", error);\r\n        // Don't show error to user as this is cleanup\r\n      }\r\n    }\r\n\r\n    onChange(\"\");\r\n    setPreviewError(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex gap-2 items-center\">\r\n      <Input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={(e) => {\r\n          onChange(e.target.value);\r\n          setPreviewError(false);\r\n        }}\r\n        onBlur={onBlur}\r\n        name={name}\r\n        placeholder=\"Enter image URL or upload a file\"\r\n        className=\"flex-1\"\r\n      />\r\n      <input\r\n        type=\"file\"\r\n        ref={fileInputRef}\r\n        onChange={handleFileChange}\r\n        accept=\"image/*\"\r\n        className=\"hidden\"\r\n      />\r\n      <Button\r\n        type=\"button\"\r\n        variant=\"outline\"\r\n        size=\"icon\"\r\n        onClick={() => fileInputRef.current?.click()}\r\n        disabled={isUploading}\r\n        title=\"Upload image\"\r\n      >\r\n        {isUploading ? (\r\n          <LoaderCircle className=\"h-4 w-4 animate-spin\" />\r\n        ) : (\r\n          <Upload className=\"h-4 w-4\" />\r\n        )}\r\n      </Button>\r\n\r\n      {value && (\r\n        <>\r\n          <Button\r\n            type=\"button\"\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            onClick={handleClearImage}\r\n            title=\"Clear image\"\r\n          >\r\n            <X className=\"h-4 w-4\" />\r\n          </Button>\r\n          <div className=\"relative h-10 w-10\">\r\n            {!previewError ? (\r\n              <Image\r\n                src={value}\r\n                alt=\"Preview\"\r\n                fill\r\n                className=\"h-10 w-10 object-cover rounded-md\"\r\n                onError={handleImageError}\r\n              />\r\n            ) : (\r\n              <div className=\"h-10 w-10 rounded-md bg-gray-100 flex items-center justify-center\">\r\n                <ImageIcon className=\"h-6 w-6 text-gray-400\" />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      type: "registry:component",
    }],
  },
}