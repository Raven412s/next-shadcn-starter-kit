{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multi-select",
  "type": "registry:component",
  "title": "Multi Select",
  "description": "A customizable multi-select dropdown component.",
  "dependencies": [
    "react",
    "lucide-react",
    "@/lib/utils"
  ],
  "registryDependencies": [
    "button",
    "input",
    "dropdown-menu",
    "badge"
  ],
  "files": [
    {
      "path": "registry//default/starter-kit-ui/multi-select.tsx",
      "content": "\"use client\"\r\nimport { ChevronDown, X } from \"lucide-react\"\r\nimport type React from \"react\"\r\nimport { useEffect, useRef, useState } from \"react\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuCheckboxItem,\r\n    DropdownMenuContent,\r\n    DropdownMenuLabel,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport interface MultiSelectProps {\r\n    options?: string[]\r\n    placeholder?: string\r\n    label?: string\r\n    className?: string\r\n    optionsDropdownWidth?: number\r\n    optionsDropdownClassName?: string\r\n    variant?: \"default\" | \"outline\" | \"secondary\"\r\n    size?: \"sm\" | \"default\" | \"lg\"\r\n    value?: string[] // Controlled value\r\n    onChange?: (selectedOptions: string[]) => void // Callback when selection changes\r\n}\r\n\r\nconst MultiSelect = ({\r\n    options = [\"Apple\", \"Banana\", \"Guava\", \"Oranges\"],\r\n    placeholder = \"Select options\",\r\n    label = \"Select options\",\r\n    className,\r\n    optionsDropdownWidth,\r\n    optionsDropdownClassName,\r\n    variant = \"default\",\r\n    size = \"default\",\r\n    value,\r\n    onChange,\r\n}: MultiSelectProps) => {\r\n    const [open, setOpen] = useState<boolean>(false)\r\n    const [disableTrigger, setDisableTrigger] = useState<boolean>(false)\r\n    const [selectedOptions, setSelectedOptions] = useState<string[]>(value || [])\r\n    const triggerRef = useRef<HTMLDivElement>(null)\r\n    const [triggerWidth, setTriggerWidth] = useState<number>(0)\r\n\r\n    // Update internal state when value prop changes (controlled component)\r\n    useEffect(() => {\r\n        if (value !== undefined) {\r\n            setSelectedOptions(value)\r\n        }\r\n    }, [value])\r\n\r\n    // Update trigger width when component mounts or resizes\r\n    useEffect(() => {\r\n        const updateWidth = () => {\r\n            if (triggerRef.current) {\r\n                setTriggerWidth(triggerRef.current.offsetWidth)\r\n            }\r\n        }\r\n\r\n        updateWidth()\r\n        window.addEventListener('resize', updateWidth)\r\n        \r\n        return () => {\r\n            window.removeEventListener('resize', updateWidth)\r\n        }\r\n    }, [])\r\n\r\n    const handleOptionToggle = (option: string) => {\r\n        const newSelectedOptions = selectedOptions.includes(option)\r\n            ? selectedOptions.filter(item => item !== option)\r\n            : [option, ...selectedOptions]\r\n        \r\n        setSelectedOptions(newSelectedOptions)\r\n        onChange?.(newSelectedOptions) // Call onChange callback\r\n    }\r\n\r\n    const removeOption = (option: string, e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        const newSelectedOptions = selectedOptions.filter(item => item !== option)\r\n        setSelectedOptions(newSelectedOptions)\r\n        onChange?.(newSelectedOptions) // Call onChange callback\r\n    }\r\n\r\n    const displayValue = selectedOptions.length > 0\r\n        ? `${selectedOptions.length} selected`\r\n        : \"\"\r\n\r\n    // Size variants\r\n    const sizeClasses = {\r\n        sm: \"h-8 text-sm py-1\",\r\n        default: \"h-10 py-2\",\r\n        lg: \"h-12 text-lg py-3\",\r\n    }\r\n\r\n    // Variant classes\r\n    const variantClasses = {\r\n        default: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary: \"border border-border bg-secondary hover:bg-secondary/80\",\r\n    }\r\n\r\n    // Badge size variants\r\n    const badgeSizeClasses = {\r\n        sm: \"text-xs px-1.5 h-5\",\r\n        default: \"text-sm px-2 h-6\",\r\n        lg: \"text-base px-2.5 h-7\",\r\n    }\r\n\r\n    return (\r\n        <DropdownMenu open={open} onOpenChange={setOpen}>\r\n            <div className={cn(\"flex flex-col gap-2 w-full\", className)}>\r\n                <p className=\"w-full flex items-center justify-between px-3.5\">\r\n                    <span>{label}</span> \r\n                    <span>{displayValue}</span>\r\n                </p>\r\n                <DropdownMenuTrigger asChild disabled={disableTrigger}>\r\n                    <div\r\n                        ref={triggerRef}\r\n                        className={cn(\r\n                            \"relative cursor-pointer rounded-md border border-input bg-background transition-colors\",\r\n                            \"focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2 overflow-hidden\",\r\n                            \"rounded-full\",\r\n                            sizeClasses[size],\r\n                            variantClasses[variant],\r\n                            \"w-full\" // Ensure full width\r\n                        )}\r\n                    >\r\n                        <Input\r\n                            readOnly\r\n                            placeholder={\r\n                                selectedOptions.length === 0 ? placeholder : \"\"\r\n                            }\r\n                            onClick={() => setOpen(!open)\r\n                            }\r\n                            className={cn(\r\n                                \"h-full border-0 focus-visible:ring-0 focus-visible:ring-offset-0\",\r\n                                \"placeholder:text-muted-foreground text-foreground cursor-pointer pr-10\",\r\n                                \"bg-transparent w-full\"\r\n                            )}\r\n                        />\r\n                        <ChevronDown className={cn(\r\n                            \"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\",\r\n                            {\r\n                                \"h-3 w-3\": size === \"sm\",\r\n                                \"h-4 w-4\": size === \"default\",\r\n                                \"h-5 w-5\": size === \"lg\",\r\n                            }\r\n                        )} />\r\n\r\n                        {/* Selected options as badges */}\r\n                        {selectedOptions.length > 0 && (\r\n                            <div className={cn(\r\n                                \"absolute left-3 top-1/2 transform -translate-y-1/2 flex gap-1 overflow-y-hidden overflow-x-auto w-full scrollbar-hide\",\r\n                                {\r\n                                    \"max-w-[88%]\": size === \"lg\",\r\n                                    \"max-w-[89%]\": size === \"default\",\r\n                                    \"max-w-[90%]\": size === \"sm\",\r\n                                }\r\n                            )}\r\n                            >\r\n                                {selectedOptions.map((option) => (\r\n                                    <Badge\r\n                                        key={option}\r\n                                        variant=\"default\"\r\n                                        className={cn(\r\n                                            \"flex items-center gap-1 pr-1 max-w-max truncate rounded-full mr-0.5\",\r\n                                            badgeSizeClasses[size]\r\n                                        )}\r\n                                    >\r\n                                        <span className=\"truncate\">{option}</span>\r\n                                        <Button\r\n                                            size=\"icon-xs\"\r\n                                            onClick={(e) => removeOption(option, e)}\r\n                                            onMouseOver={()=>setDisableTrigger(true)}\r\n                                            onMouseLeave={()=>setDisableTrigger(false)}\r\n                                            className={cn(\r\n                                                {\r\n                                                    \"p-0.5\": size === \"sm\",\r\n                                                    \"p-1\": size === \"default\" || size === \"lg\",\r\n                                                }\r\n                                            )}\r\n                                        >\r\n                                            <X className={cn({\r\n                                                \"h-2.5 w-2.5\": size === \"sm\",\r\n                                                \"h-3 w-3\": size === \"default\",\r\n                                                \"h-3.5 w-3.5\": size === \"lg\",\r\n                                            })} />\r\n                                        </Button>\r\n                                    </Badge>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </DropdownMenuTrigger>\r\n                <DropdownMenuContent\r\n                    className={cn(\"w-full\", optionsDropdownClassName)}\r\n                    style={{ \r\n                        width: optionsDropdownWidth \r\n                            ? `${optionsDropdownWidth}px` \r\n                            : `${triggerWidth}px` // Use trigger width as default\r\n                    }}\r\n                    align=\"start\"\r\n                >\r\n                    <DropdownMenuLabel>{label}</DropdownMenuLabel>\r\n                    <DropdownMenuSeparator />\r\n                    <div className=\"max-h-60 overflow-auto\">\r\n                        {options.map((option) => (\r\n                            <DropdownMenuCheckboxItem\r\n                                key={option}\r\n                                checked={selectedOptions.includes(option)}\r\n                                onCheckedChange={() => handleOptionToggle(option)}\r\n                                onSelect={(e) => e.preventDefault()}\r\n                                className={cn({\r\n                                    \"text-sm\": size === \"sm\",\r\n                                    \"text-base\": size === \"lg\",\r\n                                })}\r\n                            >\r\n                                {option}\r\n                            </DropdownMenuCheckboxItem>\r\n                        ))}\r\n                    </div>\r\n                </DropdownMenuContent>\r\n            </div>\r\n        </DropdownMenu>\r\n    )\r\n}\r\n\r\nexport default MultiSelect",
      "type": "registry:component"
    }
  ]
}